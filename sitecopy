#!/usr/bin/env php
<?php
/**
 * This script will copy one Magento installation to another location
 * and will create a new database instance if the -n flag is used
 *
 * This script is Magemojo LLC propriety specific and can only be used
 * on Magemojo LLC servers with the mmcli api installed.
 *
 * @category  SiteCopy
 * @package   Magemojo
 * @author    David Ford <david@magemojo.com>
 * @copyright 2017 Magemojo LLC
 * @license   MIT https://opensource.org/licenses/MIT
 * @link      https://magemojo.com
 */

/**
 * Sets ini value register_argc_argv
 *
 * @return void 
 */
ini_set('register_argc_argv', '1');

/**
 * Checks ini value for register_argc_argv.
 * Sets $options
 */
$options = getopt(
    'nehiu:d:v:', array(
        'user:', 'domain:', 'db:', 'host:', 'from:', 'to:'
    )
);

if (!ini_get('register_argc_argv')) {
    echo "Could not set register_argc_argv\n";
    echo "Must use --from --to flags for paths\n";
    exit(1);
} else {
    if ($argc < 3 ) {
        help();
        exit();
    } else {
        $options['from'] = $argv[$argc - 2];
        $options['to'] = $argv[$argc - 1];
    }
} 

$paths = checkPaths($options);

$src = $paths['src'];
$dest = $paths['dest'];
$vmUser = $paths['user']['user'];
$vmPass = $paths['user']['password'];
$domain = isset($options['d']) ? $options['d'] : $options['domain'];

$fromCreds = getDbCreds($paths['src']);
$toCreds = getDbCredsDest($options);

$toCheck = array_filter($toCreds); 
$fromCheck = array_filter($fromCreds);

if(empty($toCheck) || empty($fromCheck)) {
    echo "From Db or To Db creds do not exist, exiting...\n";
    exit(1);
}

if($fromCreds['dbname'] === $toCreds['dbname']) {
    echo "TO and FROM databases are the same!! You will overwrite live database!!! exiting....\n";
    exit(1);
}

if (array_key_exists('e', $options)) {
    siteCopy($paths['src'], $paths['dest'], $vmUser);
    addCreds($toCreds, $paths['dest']);
    migrateDb($fromCreds, $toCreds, $domain, $options);
}

if (array_key_exists('n', $options)) {
    createVhost($paths['src'], $paths['dest'], $vmUser, $domain);
    siteCopy($paths['src'], $paths['dest'], $vmUser);
    addCreds($toCreds, $paths['dest']);
    migrateDb($fromCreds, $toCreds, $domain, $options);
}

echo "Flushing cache...\n";
$flag = getVersion($paths['dest']);
chdir($paths['dest']);
if ($flag === 'M1') {
    exec("sudo -u $vmUser n98-magerun cache:flush");
} else if ($flag === 'M2') {
    exec("sudo -u $vmUser n98-magerun2 cache:flush");
}

echo "Finished copying magento install\n";
echo "Vhost User:$vmUser\n";
echo "Vhost Pass:$vmPass\n";

/**
 * Ensure user wants to use paths
 *
 * @param array $options cli flags
 *
 * @return array
 */
function checkPaths($options) 
{
    checkFlags($options);

    $src = $options['from'];
    $dest = $options['to'];

    $ans = readline("Copy site FROM $src TO $dest (y/N)");
    if ($ans != 'Y' 
        && $ans != 'y' 
        && $ans != 'yes' 
        && $ans != 'YES' 
        && $ans != 'Yes'
    ) {
        echo "exiting...\n";
        exit(1);
    }
    $s = explode('/', realpath($src));
    
    if (!is_dir($src) && !isDirEmpty($src) &&  $s[1] !== 'home') {
        throw new \Exception("FROM path is not valid");
    }

    $user = getVmUser($dest);
    $user1 = $user['user'];
    $userCheck = shell_exec("mmcli user:list 2>&1");
    if ($user1 === 'none' || !preg_match("/$user1/", $userCheck)) {
        if ($user1 !== 'none') {
            echo "Creating VM User...\n";
            $user = createVmUser($user1);
        }
    }
    
    if (!is_dir($dest)) {
        createDestinationFolder($dest);
    }

    $dest = realpath($dest);
    $d = explode('/', $dest);
    if ($d[1] !== 'home') {
        throw new \Exception("Destination not in /home directory");
    }

    if($user['user'] === 'none') {
        echo "Creating VM User...\n";
        $user = createVmUser($d[2]);
    } 
    
    if ($user['user'] === 'none') {
        throw new \Exception("Could not create VM User.");
    }

    return array('src' => $src, 'dest' => $dest, 'user' => $user);
}

/**
 * Ensure cli flags are used correctly
 *
 * @param array $options cli flags
 *
 * @return void
 */
function checkFlags($options = false) 
{
    if (array_key_exists('h', $options) || !isset($options)) {
        help();
        exit(0);
    }

    if (array_key_exists('n', $options) && array_key_exists('e', $options)) {
        echo "Cannot use -n new and -e existing flags together\n";
        exit(1);
    }

    if (array_key_exists('v', $options) && array_key_exists('db', $options)) {
        echo "Cannot use -v and --db flags together, they are same thing\n";
        exit(1);
    }

    if (array_key_exists('u', $options) && array_key_exists('user', $options)) {
        echo "Cannot use -u and --user flags together, they are same thing.";
        exit(1);
    }

    if (array_key_exists('e', $options) && (!(array_key_exists('d', $options) || array_key_exists('domain', $options)))) {
        echo "Need --domain or -d options when -e is used (1).\n";
        exit(1);
    }

    if(array_key_exists('u', $options) || array_key_exists('user', $options) && !(array_key_exists('db', $options) || array_key_exists('database', $options))) {
        echo "Cannot user --user or -u flag without --database or -v flag.\n";
        exit(1);
    }

    if (array_key_exists('n', $options) && (!(array_key_exists('domain', $options) || array_key_exists('d', $options)))) { 
        echo "Need --domain and --db options when -n new is used (2).\n";
        exit(1);

        if (!(array_key_exists('user', $options) || array_key_exists('u', $options))) {
            if (array_key_exists('db', $options) || array_key_exists('v', $options)) {
                $options['user'] = isset($options['db']) ? $options['db'] : $options['v'];
            } else {
                echo "need --db or -v option to continue (3).\n";
                exit(1);
            }
        }
    }  
        
    
}

/**
 * Get database credentials 
 *
 * @param array $options cli flags
 *
 * @return array 
 */
function getDbCredsDest($options) 
{
    $creds = null;
    $host;
    if (array_key_exists('db', $options) || array_key_exists('v', $options)) {
        $dbname = isset($options['db']) ? $options['db'] : $options['v'];

        $host = isset($options['host']) ? $options['host'] : 'localhost';

        if (array_key_exists('user', $options) || array_key_exists('u', $options)) {
            $dbuser = isset($options['user']) ? $options['user'] : $options['u'];
        }  else {
            $dbuser = isset($options['db']) ? $options['db'] : $options['v'];
        } 

        $creds = createDb($dbname, $dbuser, $host);
    } else {
        $creds = getDbCreds(realPath($options['to']));
    }

    return $creds;
}

/**
 * Creates Database
 *
 * @param string $dbname database name 
 * @param string $user   database user 
 * @param string $host   database host
 *
 * @throws Could not set database privileges.
 * @throws Could not create database.
 * @return array
 */
function createDb($dbname, $user, $host)
{
    echo "Creating Database...\n";
    $output = shell_exec("mmcli database:create $dbname 2>&1");
    if (!preg_match('/success/', $output)) {
        throw new \Exception("Could not create database. Message: $output");
    }

    $dbuser = createUser($user, $host);

    $output = shell_exec("mmcli database:user:privileges:update $dbname $user $host 'all privileges' 2>&1");

    if (!preg_match('/success/', $output)) {
        throw new \Exception("Could not set database privileges. Message: $output");
    }

    $creds = array(
        'dbname' => $dbname, 
        'dbuser' => $dbuser[0], 
        'dbpass' => $dbuser[1], 
        'dbhost'   => $host 
    );

    return $creds;
}

/**
 * Creates Database User
 *
 * @param string $user database user from argv
 * @param string $host database host
 *
 * @throws Could not create user, uses mmcli database:user:create
 *
 * @return string $password
 */
function createUser($user, $host)
{
    echo "Creating Database User...\n";
    $password = randomPass(12);
    $output = shell_exec(
        "mmcli database:user:create $user $host $password $password 2>&1"
    );
    if (!preg_match('/success/', $output)) {
        throw new \Exception("Could not create Database User. Message: $output");
    }

    return array($user, $password);
}

/**
 * Create a vhost
 *
 * @param string $src    source path
 * @param string $dest   destination path
 * @param string $user   vhost user
 * @param string $domain vhost domain
 *
 * @return array
 */
function createVhost($src, $dest, $user, $domain)
{
    echo "Creating vhost...\n";
    $vFlag = getVersion($src);
    $ip = getIP();
    $output = shell_exec("mmcli vhost:create $ip $user $dest '$domain' 2>&1");
    if (preg_match("/error/", $output)) {
        echo "vhost already created...\n";
    }
    createDns($domain);
    
    if (isset($vFlag) && $vFlag === 'M2') {
        $vname = str_replace('.', '_', $domain);
        echo "Setting PHP Version to 70...\n";
        $output = shell_exec("mmcli vhost:update:phpversion $vname 70 2>&1");
        if (preg_match("/error/", $output)) {
            throw new \Exception(" Could not change php version. Message: $output");
        }
        echo "Setting Template to Magento2.1...\n";
        $output = shell_exec("mmcli vhost:update:type $vname magento21 2>&1");
        if (preg_match("/error/", $output)) {
            throw new \Exception(" Could not set template. Message: $output");
        }
    }
}

/**
 * Copies site using php recursive copy.
 *
 * @param string $src     path to Magento Install
 * @param string $dest    path to Magento Install
 * @param array  $options command line options
 *
 * @return void
 */
function siteCopy($src, $dest, $user)
{
    if (is_dir($dest)) {
        if (isDirEmpty($dest)) {
            echo "$dest/ is empty.\nCopying files...\n";
            cpdirRecursive($src, $dest);
        } else {
            echo "$dest/ not empty...\n";
            $ans = readline("Delete files in $dest? (y/N)");
            if ($ans != 'y'
                && $ans != 'Y'
                && $ans != 'yes'
                && $ans != 'YES'
                && $ans != 'Yes'
            ) {
                echo "Exiting....\n";
                exit(1);
            }
            echo "Removing files...\n";
            rmdirRecursive($dest, true);
            if (!is_dir($dest)) {
                createDestinationFolder($dest);
            }
            echo "Copying files...\n";
            cpdirRecursive($src, $dest);
        }
        echo "Setting permissions...\n";
        chownRecursive($dest, $user);
    }
}

/**
 * Check to see if directory is empty
 *
 * @param string $dir path to directory
 *
 * @return bool|null
 */
function isDirEmpty($dir) 
{
    if (!is_readable($dir)) {
        return null;
    }

    return (count(scandir($dir)) == 2);
}

/**
  * Creates psuedo-random password
  *
  * @param int $length length of password
  *
  * @link https://gist.github.com/zyphlar/7217f566fc83a9633959
  *
  * @return $password
  */
function randomPass($length)
{
    return substr(
        preg_replace(
            "/[^a-zA-Z0-9]/", 
            "", 
            base64_encode(
                getRandomBytes(
                    $length+1
                )
            )
        ),
        0, 
        $length
    );
}

/**
 * Create cryptographically secure bytes.
 *
 * @param int $nbBytes number of bytes default 32
 *
 * @link https://gist.github.com/zyphlar/7217f566fc83a9633959
 *
 * @throws Unable to generate secure token from OpenSSL.
 * @return bytes
 */
function getRandomBytes($nbBytes = 32)
{
    $bytes = openssl_random_pseudo_bytes($nbBytes, $strong);
    if (false !== $bytes && true === $strong) {
        return $bytes;
    } else {
        throw new \Exception("Unable to generate secure token from OpenSSL.");
        exit(1);
    }
}

/**
 * Migrates database.
 *
 * @param array  $options    options
 * @param string $fromCreds  database credentials of database copying from.
 * @param string $toCreds database credentials of database copying to.
 *
 * @throws Could not dump database uses mysqldump, gzip
 * @throws could not import database uses zcat, mysql
 *
 * @return void 
 */
function migrateDb($fromCreds, $toCreds, $domain, $options)
{
    echo "Creating database dump...\n";
    $srcname  = $fromCreds['dbname'];
    $srchost  = $fromCreds['dbhost'];
    $srcuser  = $fromCreds['dbuser'];
    $srcpass  = $fromCreds['dbpass'];
    $destname = $toCreds['dbname'];
    $desthost = $toCreds['dbhost'];
    $destuser = $toCreds['dbuser'];
    $destpass = $toCreds['dbpass'];
    $dbprefix = null;
    if (isset($fromCreds['dbprefix'])) {
        $dbprefix = $fromCreds['dbprefix'];
    }

    $tstamp = time();
    $dbfile = "/home/$srcname.$tstamp.sql.gz";

    $output = shell_exec(
        "mysqldump --quick --lock-tables=false -h$srchost -u$srcuser -p$srcpass $srcname | gzip > $dbfile"
    );

    if (preg_match("/error/", $output)) {
        throw new \Exception(" Could not dump database. Message: $output");
    }

    if (array_key_exists('e', $options)) { 
        if (!(array_key_exists('v', $options) || array_key_exists('db', $options))) {
            echo "Dropping database $destname...\n";
            $output = shell_exec("mmcli database:delete $destname 2>&1"); 
            
            if (preg_match("/error/", $output)) {
                throw new \Exception(" Could not delete database. Message: $output");
            }

            echo "Creating database $destname...\n";
            $output = shell_exec("mmcli database:create $destname 2>&1");

            if (preg_match("/error/", $output)) {
                throw new \Exception("Could not set privileges for db user. Message: " . $output . "\n");
            }

            echo "Setting database permissions...\n";
            $output = shell_exec("mmcli database:user:privileges:update $destname $destuser $desthost 'all privileges' 2>&1");

            if (preg_match("/error/", $output)) {
                throw new \Exception($output . " Could not set database permissions. Message: " . $output . "\n");
            }

        }
    }
    
    echo "Importing database...\n";
    try {
        $output = shell_exec("zcat $dbfile | mysql -h$desthost -u$destuser -p$destpass $destname 2>&1");
    } catch (\Exception $e) {
        echo "Could not import database " . $e->message . "\n";
        exit(1);
    }

    unlink($dbfile);

    echo "Changing base_urls to 'http://". $domain . "/'...\n";

    try {
        $dest = new \PDO(
            "mysql:dbname=$destname;host=$desthost",
            $destuser,
            $destpass
        );
       $output = $dest->exec("UPDATE $dbprefix" . "core_config_data SET value = 'http://$domain/' WHERE path = 'web/unsecure/base_url' or path = 'web/secure/base_url'");

        $output = $dest->exec("UPDATE $dbprefix" . "core_config_data SET value = '0' where path = 'web/secure/use_in_frontend' or path = 'web/secure/use_in_adminhtml'");

        $output = $dest->exec("UPDATE $dbprefix" . "core_config_data SET value = NULL where path = 'web/cookie/cookie_domain'");

        $output = $dest->exec("TRUNCATE $dbprefix" . "log_visitor");

        $output = $dest->exec("TRUNCATE $dbprefix" . "log_visitor_info");
    } catch (\PDOException $e) {
        echo 'Connection failed: ' . $e->getMessage() . "\nYou will need to change db credentials manually!!\n";
    }
}

/**
 * Get existing Magento database credentials 
 *
 * @param string $path path to Magento install
 *
 * @return array returns array of database credentials.
 */
function getDbCreds($path)
{
    if (is_file($path . '/app/etc/local.xml')) {
        $doc = new DOMDocument();
        $doc->load($path . '/app/etc/local.xml');
        $i = 0;
        while (is_object($data = $doc->getElementsByTagName('db')->item($i))) {
            foreach ($data->childNodes as $nodename) {
                if ($nodename->nodeName == 'table_prefix') {
                    $dbprefix = $nodename->nodeValue;
                }
            }
            $i++;
        }
        $i = 0; 
        while (is_object(
            $data = $doc->getElementsByTagName('connection')->item($i)
        )) {
            foreach ($data->childNodes as $nodename) {
                switch($nodename->nodeName) {
                case 'dbname': $dbname = $nodename->nodeValue;
                    break;
                case 'username': $dbuser = $nodename->nodeValue;
                    break;
                case 'password': $dbpass = $nodename->nodeValue;
                    break;
                case 'host': $dbhost = $nodename->nodeValue;
                    break;
                }
            }
            $i++;
        }
        
        return array(
            'dbprefix' => $dbprefix, 
            'dbname' => $dbname, 
            'dbuser' => $dbuser, 
            'dbpass' => $dbpass, 
            'dbhost' => $dbhost, 
        );
    } else if (is_file($path . '/app/etc/env.php')) {
            $envData = include $path . '/app/etc/env.php';
        return array('dbprefix' => $envData['db']['table_prefix'], 
            'dbname' => $envData['db']['connection']['default']['dbname'], 
            'dbuser' => $envData['db']['connection']['default']['username'],
            'dbpass' => $envData['db']['connection']['default']['password'], 
            'dbhost' => $envData['db']['connection']['default']['host'], 
        );
        
    } else {
        return null;
    }
}

/**
 * Add/Change database credentials to local.xml
 *
 * @param array  $creds to database credentials
 * @param string $path  path to Magento install.
 *
 * @return bool
 */
function addCreds($creds, $path)
{
    if (is_file($path . '/app/etc/local.xml')
    ) {
        echo "Changing db credentials in local.xml.\n";
        $doc = new DOMDocument();
        $doc->load($path . '/app/etc/local.xml');
        $i = 0;
        while (is_object(
            $data = $doc->getElementsByTagName('connection')->item($i)
        )) {
            foreach ($data->childNodes as $nodename) {
                switch($nodename->nodeName) {
                case 'dbname':      $node = $nodename->childNodes->item(0);
                                    $nodename->removeChild($node);
                                    $cdata = $nodename->ownerDocument
                                        ->createCdataSection($creds['dbname']);
                                    $nodename->appendChild($cdata);
                    break;
                case 'username':    $node = $nodename->childNodes->item(0);
                                    $nodename->removeChild($node);
                                    $cdata = $nodename->ownerDocument
                                        ->createCdataSection($creds['dbuser']);
                                    $nodename->appendChild($cdata);                
                    break;
                case 'password':    $node = $nodename->childNodes->item(0);
                                    $nodename->removeChild($node);
                                    $cdata = $nodename->ownerDocument
                                        ->createCdataSection($creds['dbpass']);
                                    $nodename->appendChild($cdata);
                    break;
                case 'host':        $node = $nodename->childNodes->item(0);
                                    $nodename->removeChild($node);
                                    $cdata = $nodename->ownerDocument
                                        ->createCdataSection($creds['dbhost']);
                                    $nodename->appendChild($cdata);
                    break;
                }
            }
            $i++;
        }
        $result = $doc->save($path . '/app/etc/local.xml');
        return $result;
    } else if (is_file($path . '/app/etc/env.php')
    ) {
        echo "Setting credentials in env.php...\n";
        $envData = include $path . '/app/etc/env.php'; 
        $envData['db']['connection']['default']['dbname'] = $creds['dbname'];
        $envData['db']['connection']['default']['username'] = $creds['dbuser'];    
        $envData['db']['connection']['default']['password'] = $creds['dbpass'];
        $envData['db']['connection']['default']['host'] = $creds['dbhost'];
        $output = var_export($envData, true);
        try {
            $fp = fopen($path . '/app/etc/env.php', 'w');
            fwrite($fp, "<?php\n return " . $output . ";\n");
            fclose($fp);
        } catch (\Exception $e) {
            throw new \Exception("Could not write file" . $e);
            exit(1);
        }
        return true;
    } else {
        throw new \Exception("Could not load config file");
        exit(1);
    }
    return false;
}

/**
 * Change mode of a directory/file recursively
 *
 * @param string $dir  directory or file
 * @param int    $mode mode
 *
 * @return bool
 */
function chmodRecursive($dir, $mode)
{
    return _recursiveCallback($dir, ['chmod', [$mode]]);
}

/**
 * Change owner of a directory/file recursively
 *
 * @param string $path directory or file
 * @param string $user user 
 *
 * @return bool
 */
function chownRecursive($path, $user)
{
    $dir = new DirectoryIterator($path);
    foreach ($dir as $item) {
        chown($item->getPathname(), (string)$user);
        chgrp($item->getPathname(), "web-data");
        if ($item->isDir() && !$item->isDot()) {
            chownRecursive($item->getPathname(), $user);
        }
    }
}

/**
 * Create destination folder
 *
 * @param string $destinationFolder destination folder
 *
 * @return bool
 */
function createDestinationFolder($destinationFolder)
{
    return checkAndCreateFolder($destinationFolder);
}
/**
 * Check and create if not exists folder
 *
 * @param string $folder folder to check
 * @param int    $mode   mode
 *
 * @return true
 * @throws \Exception
 */
function checkAndCreateFolder($folder, $mode = 0755)
{

    if($folder != '.' || $folder != '..') {
        $tmp = explode('/', $folder);
        if($tmp[1] != 'home') {
            throw new \Exception(
                "folder is not in /home/ directory.\n"
            );
        }
    }
    
    if (is_dir($folder)) {
        return true;
    }
    if (!is_dir(dirname($folder))) {
        checkAndCreateFolder(dirname($folder), $mode);
    }
    if (!is_dir($folder) && !mkdir($folder, $mode)) {
        throw new \Exception(
            "Unable to create directory '{$folder}'. Access forbidden."
        );
    }
    return true;
}

/**
 * Applies specified callback for a directory/file recursively
 *
 * $fileCallback and $dirCallback format: array($callback, $parameters)
 * - $callback - callable
 * - $parameters (optional) - array with parameters to be passed to the $callback
 *
 * @param string $dir          directory affected
 * @param array  $fileCallback file callback
 * @param array  $dirCallback  directory callback
 *
 * @return mixed
 *
 * @throws \InvalidArgumentException
 */
function _recursiveCallback($dir, array $fileCallback, array $dirCallback = [])
{
    if (empty($fileCallback) 
        || !is_array($fileCallback) 
        || !is_array($dirCallback)
    ) {
        throw new \InvalidArgumentException("file/dir callback is not specified");
        exit(1);
    }
    if (empty($dirCallback)) {
        $dirCallback = $fileCallback;
    }
    if (is_dir($dir)) {
        foreach (scandir($dir) as $item) {
            if (!strcmp($item, '.') || !strcmp($item, '..')) {
                continue;
            }
            if(is_link($dir)) {
                $fileCallback[0] = 'is_file';
                $dirCallback[0] = 'is_dir';
            }
            _recursiveCallback($dir . '/' . $item, $fileCallback, $dirCallback);
        }
        $callback = $dirCallback[0];
        if (!is_callable($callback)) {
            throw new \InvalidArgumentException(
                "'dirCallback' parameter is not callable"
            );
            exit(1);
        }
        $parameters = isset($dirCallback[1]) ? $dirCallback[1] : [];
    } else {
        $callback = $fileCallback[0];
        if (!is_callable($callback)) {
            throw new \InvalidArgumentException(
                "'fileCallback' parameter is not callable"
            );
            exit(1);
        }
        $parameters = isset($fileCallback[1]) ? $fileCallback[1] : [];
    }
    array_unshift($parameters, $dir);
    $result = @call_user_func_array($callback, $parameters);

    return $result;
}

/**
 * Delete a directory recursively
 *
 * @param string $dir       directory to remove
 * @param bool   $recursive recursive flag
 *
 * @return bool
 */
function rmdirRecursive($dir, $recursive = true)
{
    if ($recursive) {
        $result = _recursiveCallback($dir, ['unlink'], ['rmdir']);
    } else {
        if(!is_link($dir)) {
            $result = @rmdir($dir);
        }         
    }
    return $result;
}

/**
 * Copy dir recursively
 *
 * @param string $src  source directory.
 * @param string $dest destination directory.
 *
 * @return void 
 */
function cpdirRecursive($src, $dest)
{
    foreach (
        $iterator = new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator(
                $src, \RecursiveDirectoryIterator::SKIP_DOTS
            ), \RecursiveIteratorIterator::SELF_FIRST
        ) as $item
    ) {
        if ($item->isDir()) {
            @mkdir($dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName());
        } else {
            @copy($item, $dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName());
        }
    } 
}

/**
 * Get Magento version (1.x or 2.x)
 *
 * @param string $path path to Magento install
 *
 * @return void|bool
 */
function getVersion($path)
{
    if (is_file($path . '/app/etc/env.php')) {
        return 'M2';
    } 
    
    if (is_file($path . '/app/etc/local.xml')) {
        return 'M1';
    }

    return null;
}

/**
 * Get vm user
 *
 * @param string $path path to get user from
 *
 * @return string
 */
function getVmUser($path)
{
    if(is_dir($path)) {
        $dirs = explode('/', $path, 4);
        $user = $dirs[2];

        return array('user' => $user, 'password' => 'Reset User Password');
    }
    
    return array('user' => 'none', 'password' => 'none');
}

/**
 * Get Server Internal IP
 *
 * @return string
 */
function getIP() 
{
    return gethostbyname(gethostname());
}

/**
 * Create DNS entry
 *
 * @param string $domain domain
 *
 * @return void
 */
function createDns($domain)
{
    echo "Creating DNS...\n";
    $ip = exec('curl http://ipcheck.com 2>&1');
    $output = shell_exec("mmcli dns:create $domain $ip 2>&1");
    if (preg_match("/error/", $output)) {
        echo "DNS already created...\n";
    }
}

/**
 * Test if same user
 *
 * @param string $src  source path
 * @param string $dest destination path
 *
 * @return bool
 */
function testPath($src, $dest)
{

    $s = explode('/', realpath($src));
    $d = explode('/', realpath($dest));

    if ($s[2] != $d[2]) {
        return true;
    }

    return false;
}

/**
 * Create vhost user
 *
 * @param string $user vhost user
 *
 * @return array
 */
function createVmUser($user)
{
    $password = randomPass(12);
    $output = shell_exec("mmcli user:create $user $password 2>&1");
    if (preg_match('/error/', $output)) {
        echo "Vhost user already exists continuing...\n";
    }

    return array('user' => $user, 'password' => $password);
}

/**
 * Gives usage instructions
 *
 * @return void
 */
function help() 
{
    echo "\nMust be run as user root! Be Careful!\n
        Please report all bugs to david@magemojo.com\n\n
        NOTE: If vhost already exists that has multiple domains, a new vhost will be created,
        with just single domain as listed in --domain flag,
         just delete the new vhost if needed\n\n";
    echo "usage: ./sitecopy -dehnuv [ --user db_user ] 
        [ --db db_name ] [ --domain domain_name ] 
        /path/from/Magento /path/to/Magento\n";
    echo "\nex. ./sitecopy -e --domain mefu.magemojo.io 
        /home/user/public_html/ /home/user/dev/\n";
    echo "\nex. ./sitecopy -n --db new_db 
        --domain mefu2.magemojo.io 
        /home/user/public_html/ /home/user/dev2/\n\n";
    echo "-d domain name (same as --domain)\n";
    echo "-e existing\n";
    echo "-h help\n";
    echo "-n new\n";
    echo "-u database user (same as --user)\n";
    echo "-v database name (same as --db)\n";
    echo "--db database name (same as -v, only needed if -n is used)\n";
    echo "--domain domain of vhost to be copied to\n";
    echo "--host database host (if not localhost)\n";
    echo "--user database user (same as -u, only needed if -n is used)\n";
}

