#!/usr/bin/php70
<?php
/**
 * This script will copy one Magento installation to another location
 * and will create a new database instance if the -n flag is used
 *
 * This script is Magemojo LLC propriety specific and can only be used
 * on Magemojo LLC servers with the mmcli api installed.
 *
 * @category  Magento 2 Install
 * @package   Magemojo
 * @author    David Ford <david@magemojo.com>
 * @copyright 2017 Magemojo LLC
 * @license   MIT https://opensource.org/licenses/MIT
 * @link      https://magemojo.com
 */

/**
 * Sets ini value register_argc_argv
 *
 * @return void 
 */
ini_set('register_argc_argv', '1');

/**
 * Checks ini value for register_argc_argv.
 * Sets $options
 */
$options = getopt(
    'hiu:d:v:b:', array(
        'm1', 'm2', 'user:', 'domain:', 'db:', 'host:', 'to:', 'version:', 'interactive', 'help'
    )
);

if($argc < 2) {
    help();
    exit;
}
if (!ini_get('register_argc_argv')) {
    echo "Could not set register_argc_argv\n";
    echo "Must use --from --to flags for paths\n";
    exit(1);
} else {
    if ($argc < 3 ) {
        echo "Need to use --to /path/to/install in order to continue.\n";
        exit();
    } else {
        $options['to'] = $argv[$argc - 1];
    }
} 

list($vmUser, $dest, $domain, $mflag, $dbuser, $dbname, $dbhost, $version) = checkFlags($options);

createVhost($dest, $vmUser, $domain, $mflag);
$db = createDb($dbname, $dbuser, $dbhost);
install($vmUser, $dest, $domain, $mflag, $db, $version);

echo "Finished Installing Magento 2\n";
if (isset($vmUser)) {
    echo "Vhost User " . $vmUser['name'] . "\n";
    echo "Vhost Pass " . $vmUser['passwd'] . "\n";
    foreach($db as $key => $value) {
        echo "$key: $value\n";
    }
}

/**
 * Get Server Internal IP
 *
 * @return string
 */
function getIP() 
{
    return gethostbyname(gethostname());
}

/**
 * Create DNS entry
 *
 * @param string $domain domain
 *
 * @return void
 */
function createDns($domain)
{
    echo "Creating DNS...\n";
    $ip = exec('curl http://ipecho.net/plain; echo');
    $output = shell_exec("mmcli dns:create $domain $ip 2>&1");
    if (preg_match("/error/", $output)) {
        echo "DNS already created...\n";
    }
}

/**
 * Test if same user
 *
 * @param string $dest destination path
 *
 * @return bool
 */
function _testPath($dest)
{

    if($dest === '.') {
        $dest = posix_getcwd();
    } else if($dest === '..') {
        $pwd = explode('/', posix_getcwd());
        $dest = $pwd[count($pwd) - 1];
    }

    if(is_dir($dest)) {
        $dir = explode('/', realpath($dest));
    } else {
        createDestinationFolder($dest);
        $dir = explode('/', realpath($dest));
    }

    if ($dir[1] !== 'home') {
        echo "Dest not in home directory.\n";
        exit(1);
    }

    $user = posix_getpwnam($dir[2]);

    if(empty($user)) {
        $user = array();
        list($name, $passwd) = createVUser($dir[2]);
        $user['name'] = $name;
        $user['passwd'] = $passwd;
    } 

    return array($user, realpath($dest));
}

/**
 * Ensure user wants to use paths
 *
 * @param array $dest dest path
 *
 * @return array
 */
function checkPath($dest) 
{
    
    list($user, $dest) = _testPath($dest);

    

    return array($user, $dest);

}

/**
 * Create vhost user
 *
 * @param string $user vhost user
 *
 * @return array
 */
function createVUser($user)
{
    $password = randomPass(12);
    $output = shell_exec("mmcli user:create $user $password 2>&1");
    if (preg_match('/error/', $output)) {
        echo "Vhost user already exists continuing...\n";
    }

    return array($user, $password);
}

/**
 * Ensure cli flags are used correctly
 *
 * @param array $options cli flags
 *
 * @return void
 */
function checkFlags($options) 
{
    $host = 'localhost';

    if (array_key_exists('h', $options) || array_key_exists('help', $options)) {
        help();
        exit(0);
    }

    if (isset($options['to'])) {
        list($vmUser, $dest) = checkPath($options['to']);
    } else {
        echo "Install path not set.\n";
        exit(1);
    }
    
    if (array_key_exists('b', $options) && array_key_exists('db', $options)) {
        echo "Cannot use -b and --db flags together, they are same thing\n";
        exit(1);
    } else if (array_key_exists('b', $options) || array_key_exists('db', $options)) {
        $dbname = isset($options['b']) ? $options['b'] : $options['db'];
    } else {
        echo "Must have one of -b or --db to continue\n";
        exit(1);
    }

    if (array_key_exists('u', $options) && array_key_exists('user', $options)) {
        echo "Cannot use -u and --user flags together, they are same thing.\n";
        exit(1);
    } else if(array_key_exists('u', $options) || array_key_exists('user', $options)) {
        $dbuser = isset($options['u']) ? $options['u'] : $options['user'];
    } else {
        if (array_key_exists('db', $options) || array_key_exists('b', $options)) {
            $dbuser = $options['user'] = isset($options['db']) ? $options['db'] : $options['b'];
        } 
    }

    if (array_key_exists('d', $options) && array_key_exists('domain', $options)) {
        echo "Cannot user -d and --domain flags together, they are same thing.\n";
    } else if(array_key_exists('d', $options) || array_key_exists('domain', $options)) {
        $domain = isset($options['d']) ? $options['d'] : $options['domain'];
    } else {
        echo "Must have -d or --domain to continue\n";
        exit(1);
    }

    if(array_key_exists('host', $options)) {
        $host = $options['host'];
    }
    if(!(array_key_exists('m1', $options) || array_key_exists('m2', $options))) {
        echo "Must specify flag --m1 or --m2\n";
        exit(1);
    } else {
        $mflag = isset($options['m1']) ? 'M1' : 'M2';
    } 

    if(array_key_exists('v', $options) && array_key_exists('version', $options)) {
        echo "Cannot use -v and --version together, they are same thing.\n";
        exit(1);
    } else if(array_key_exists('v', $options) || array_key_exists('version', $options)) {
        $version = isset($options['v']) ? $options['v'] : $options['version'];
    } else {
        if($mflag = 'M2') {
            $version = '2.2';
        } else if ($mflag === 'M1') {
            $version = '1.9.3.6';
        }
    }

    if(!array_key_exists('i', $options) && !array_key_exists('interactive', $options)) {
        $ans = readline("Install Magento TO $dest (y/N)");
        if ($ans != 'Y' 
            && $ans != 'y' 
            && $ans != 'yes' 
            && $ans != 'YES' 
            && $ans != 'Yes'
        ) {
            echo "exiting...\n";
            exit(1);
        }
    } else {
        echo "Installing Magento TO $dest/\n\n";
    }

    return array($vmUser, $dest, $domain, $mflag, $dbuser, $dbname, $host, $version);
}

/**
 * Get database credentials 
 *
 * @param array $options cli flags
 *
 * @return array 
 */
function createDb($dbname, $dbuser, $dbhost) 
{
    $creds = _createDb($dbname, $dbuser, $dbhost);

    if (!isset($creds)) {
        throw new \Exception("could not create db.");
        exit(1);
    }

    return $creds;
}

/**
 * Gives usage instructions
 *
 * @return void
 */
function help() 
{
    echo "\nMust be run as user root! Be Careful!\n
        Please report all bugs to david@magemojo.com\n\n";
    echo "usage: ./minstall -dhuvb --m1|--m2 --db db_name --domain domain_name [ --user db_user ] [ --version version ]/path/to/Magento/Install\n";
    echo "\nex. ./minstall --m2 --db new_db --domain mefu.magemojo.io --version 2.2 /home/user/dev/\n";
    echo "-d domain name (same as --domain)\n";
    echo "-h help\n";
    echo "-i non-interactive use -i\n";
    echo "-u database user (same as --user)\n";
    echo "-b database name (same as --db)\n";
    echo "-v magento version\n";
    echo "--db database name (same as -v, only needed if -n is used)\n";
    echo "--domain domain of vhost to be copied to\n";
    echo "--host database host (if not localhost)\n";
    echo "--user database user (same as -u, only needed if -n is used)\n";
    echo "--version Magento Version\n";
    echo "--interactive non-interactive mode\n";
    echo "--help for this menu\n";
}

/**
 * Creates Database
 *
 * @param string $dbname database name 
 * @param string $user   database user 
 * @param string $host   database host
 *
 * @throws Could not set database privileges.
 * @throws Could not create database.
 * @return array
 */
function _createDb($dbname, $dbuser, $dbhost)
{

    $dbpass = createDbUser($dbuser, $dbhost);
    echo "Creating Database...\n";
    $output = shell_exec("mmcli database:create $dbname 2>&1");
    if (preg_match('/success/', $output)) {
        $output = shell_exec(
            "mmcli database:user:privileges:update $dbname $dbuser $dbhost 'all privileges' 2>&1"
        );

        if (!preg_match('/success/', $output)) {
            throw new \Exception("Could not set database privileges. Message: " . $output . "\n");
             exit(1);
        }
    } else {
        throw new \Exception("Could not create database.");
        exit(1);
    }

    $creds = array(
        'dbname'    => $dbname, 
        'dbuser'    => $dbuser, 
        'dbpass'    => $dbpass, 
        'dbhost'    => $dbhost 
    );
    return $creds;
}

/**
 * Creates Database User
 *
 * @param string $user database user from argv
 * @param string $host database host
 *
 * @throws Could not create user, uses mmcli database:user:create
 *
 * @return string $password
 */
function createDbUser($user, $host)
{
    echo "Creating Database User...\n";
    $password = randomPass(12);
    $output = shell_exec(
        "mmcli database:user:create $user $host $password $password 2>&1"
    );
    if (!preg_match('/success/', $output)) {
        throw new \Exception("Could not create user. Message: " . $output . "\n");
        exit(1);
    }

    return $password;
}

/**
 * Create a vhost
 *
 * @param string $src    source path
 * @param string $dest   destination path
 * @param string $user   vhost user
 * @param string $domain vhost domain
 *
 * @return array
 */
function createVhost($dest, $user, $domain, $mflag)
{
    echo "Creating vhost...\n";
    $ip = getIP();
    $userName = $user['name'];
    $userPass = $user['passwd'];
    $output = shell_exec("mmcli vhost:create $ip $userName $dest '$domain' 2>&1");
    if (preg_match("/error/", $output)) {
        echo "vhost already created...\n";
    }
    createDns($domain);
    
    
    if ($mflag === 'M2') {
        $vname = str_replace('.', '_', $domain);
        echo "Setting PHP Version to 70...\n";
        $output = shell_exec("mmcli vhost:update:phpversion $vname 70 2>&1");
        if (preg_match("/error/", $output)) {
            throw new \Exception($output . " Could not change php version. Message: " . $output . "\n");
            exit(1);
        }
        echo "Setting Template to Magento2.1...\n";
        $output = shell_exec("mmcli vhost:update:type $vname magento21 2>&1");
        if (preg_match("/error/", $output)) {
            throw new \Exception($output . " Could not set template. Message: " . $output . "\n");
            exit(1);
        }
    }
}

/**
 * Installs Magento 1 or 2.
 *
 * @param string $dest    path to Magento Install
 * @param array  $options command line options
 *
 * @return void
 */
function install($vmUser, $dest, $domain, $mflag, Array $db, $version)
{
    
    $userName = $vmUser['name'];
    if (is_dir($dest)) {
        chdir($dest);
        $user = posix_getpwnam($vmUser['name']);
        chown($dest, $user['name']);
        chgrp($dest, 'web-data');
        //posix_setuid($user['uid']);
        $path = posix_getcwd();
        echo $path . "\n";
        if($path !== $dest) {
            throw new \Exception("Could not change directory into $dest");
            exit(1);
        }

        if (isDirEmpty($dest)) {
            echo "$dest/ is empty.\nInstalling $mflag...\n";
            _installFiles($dest, $domain, $mflag, $db, $version, $userName);
            echo "Finished installing files.\n";
        } else {
            echo "$dest/ not empty...\n";
            if (!array_key_exists('i', $options)) {
                $ans = readline("Delete files in $dest? (y/N)");
                if ($ans != 'y'
                    && $ans != 'Y'
                    && $ans != 'yes'
                    && $ans != 'YES'
                    && $ans != 'Yes'
                ) {
                    echo "Exiting....\n";
                    exit(1);
                }
            }
            echo "Removing Files...\n";
            rmdirRecursive($dest, true);
            createDestinationFolder($dest);
            chown($dest, $userName);
            chgrp($dest, 'web-data');
            echo "Installing $mflag...\n";
            _installFiles($dest, $domain, $mflag, $db, $version, $userName);
        }
    }
}

function _installFiles($dest, $domain, $mflag, $db, $version, $userName)
{
    $publickey = 'aa6087e1263299edfda4b096cb610d3c';
    $privatekey = 'aa6087e1263299edfda4b096cb610d3c';
    $adminPass = randomPass(12);
     
    if($mflag === 'M2') {
        exec("sudo -u $userName COMPOSER_AUTH='{\"http-basic\": {\"repo.magento.com\": {\"username\": \"dbbca56211fff4e4efd571db7814780d\", \"password\": \"6ae81f9a2f4f67ea67c63c06e5db1992\"}}}' composer create-project --repository-url=https://repo.magento.com magento/project-community-edition:$version $dest");
        _installMagentoTwo($domain, $db, $adminPass, $userName);
    } else {
        _installMagentoOne($domain, $db, $adminPass, $dest, $userName); 
    }
}

function _installMagentoTwo($domain, Array $db, $adminPass, $userName)
{
    $dbname = $db['dbname'];
    $dbuser = $db['dbuser'];
    $dbpass = $db['dbpass'];
    $dbhost = $db['dbhost'];

    shell_exec("sudo -u $userName php70 bin/magento setup:install --db-host $dbhost --db-user $dbuser --db-password $dbpass --base-url http://$domain/ --use-secure 0 --use-secure-admin 0 --use-rewrites 1 --language en_US --timezone America/Chicago --currency USD --admin-user admin --admin-password $adminPass --admin-email test@example.com --admin-firstname Admin --admin-lastname ChangeMe");
}

function _installMagentoOne($domain, Array $db, $adminPass, $dest, $userName)
{
    list($dbname, $dbuser, $dbpass, $dbhost) = $db;

    shell_exec("sudo -u $userName n98-magerun install --dbHost=$dbhost --dbUser=$dbUser --dbPass=$dbPass --dbName=$dbName --useDefaultConfigParams=yes  --magentoVersionByName=magento-ce-$version --installationFolder=$dest --baseUrl=http://$domain/");
}
/**
 * Check to see if directory is empty
 *
 * @param string $dir path to directory
 *
 * @return bool|null
 */
function isDirEmpty($dir) 
{
    if (!is_readable($dir)) {
        return null;
    }

    return (count(scandir($dir)) == 2);
}

/**
  * Creates psuedo-random password
  *
  * @param int $length length of password
  *
  * @link https://gist.github.com/zyphlar/7217f566fc83a9633959
  *
  * @return $password
  */
function randomPass($length)
{
    return substr(
        preg_replace(
            "/[^a-zA-Z0-9]/", 
            "", 
            base64_encode(
                getRandomBytes(
                    $length+1
                )
            )
        ),
        0, 
        $length
    );
}

/**
 * Create cryptographically secure bytes.
 *
 * @param int $nbBytes number of bytes default 32
 *
 * @link https://gist.github.com/zyphlar/7217f566fc83a9633959
 *
 * @throws Unable to generate secure token from OpenSSL.
 * @return bytes
 */
function getRandomBytes($nbBytes = 32)
{
    $bytes = openssl_random_pseudo_bytes($nbBytes, $strong);
    if (false !== $bytes && true === $strong) {
        return $bytes;
    } else {
        throw new \Exception("Unable to generate secure token from OpenSSL.");
        exit(1);
    }
}

/**
 * Change owner of a directory/file recursively
 *
 * @param string $path directory or file
 * @param string $user user 
 *
 * @return bool
 */
function chownRecursive($path, $user)
{
    $dir = new DirectoryIterator($path);
    foreach ($dir as $item) {
        chown($item->getPathname(), (string)$user);
        chgrp($item->getPathname(), "web-data");
        if ($item->isDir() && !$item->isDot()) {
            chownRecursive($item->getPathname(), $user);
        }
    }
}

/**
 * Create destination folder
 *
 * @param string $destinationFolder destination folder
 *
 * @return bool
 */
function createDestinationFolder($destinationFolder)
{
    return checkAndCreateFolder($destinationFolder);
}
/**
 * Check and create if not exists folder
 *
 * @param string $folder folder to check
 * @param int    $mode   mode
 *
 * @return true
 * @throws \Exception
 */
function checkAndCreateFolder($folder, $mode = 0755)
{
    if (is_dir($folder)) {
        return true;
    }
    if (!is_dir(dirname($folder))) {
        checkAndCreateFolder(dirname($folder), $mode);
    }
    if (!is_dir($folder) && !mkdir($folder, $mode)) {
        throw new \Exception(
            "Unable to create directory '{$folder}'. Access forbidden."
        );
        exit(1);
    }
    return true;
}

/**
 * Applies specified callback for a directory/file recursively
 *
 * $fileCallback and $dirCallback format: array($callback, $parameters)
 * - $callback - callable
 * - $parameters (optional) - array with parameters to be passed to the $callback
 *
 * @param string $dir          directory affected
 * @param array  $fileCallback file callback
 * @param array  $dirCallback  directory callback
 *
 * @return mixed
 *
 * @throws \InvalidArgumentException
 */
function _recursiveCallback($dir, array $fileCallback, array $dirCallback = [])
{
    if (empty($fileCallback) 
        || !is_array($fileCallback) 
        || !is_array($dirCallback)
    ) {
        throw new \InvalidArgumentException("file/dir callback is not specified");
        exit(1);
    }
    if (empty($dirCallback)) {
        $dirCallback = $fileCallback;
    }
    if (is_dir($dir)) {
        foreach (scandir($dir) as $item) {
            if (!strcmp($item, '.') || !strcmp($item, '..')) {
                continue;
            }
            _recursiveCallback($dir . '/' . $item, $fileCallback, $dirCallback);
        }
        $callback = $dirCallback[0];
        if (!is_callable($callback)) {
            throw new \InvalidArgumentException(
                "'dirCallback' parameter is not callable"
            );
            exit(1);
        }
        $parameters = isset($dirCallback[1]) ? $dirCallback[1] : [];
    } else {
        $callback = $fileCallback[0];
        if (!is_callable($callback)) {
            throw new \InvalidArgumentException(
                "'fileCallback' parameter is not callable"
            );
            exit(1);
        }
        $parameters = isset($fileCallback[1]) ? $fileCallback[1] : [];
    }
    array_unshift($parameters, $dir);
    $result = @call_user_func_array($callback, $parameters);

    return $result;
}

/**
 * Delete a directory recursively
 *
 * @param string $dir       directory to remove
 * @param bool   $recursive recursive flag
 *
 * @return bool
 */
function rmdirRecursive($dir, $recursive = true)
{
    if ($recursive) {
        $result = _recursiveCallback($dir, ['unlink'], ['rmdir']);
    } else {
        $result = @rmdir($dir);
    }
    return $result;
}


